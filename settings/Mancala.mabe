random_seed = 0;                // Seed for random number generator; use 0 to base on time.
Population main_pop;            // Collection of organisms
Population next_pop;            // Collection of organisms
Value pop_size = 200;           // Local value variable.
CommandLine cl {                // Handle basic I/O on the command line.
  target_pop = "main_pop";      // Which population should we print stats about?
}
FileOutput output {             // Output collected data into a specified file.
  filename = "output.csv";      // Name of file for output data.
  format = "score:max,score:mean";// Column format to use in the file.
  target = "main_pop";          // Which population(s) should we print from?
  output_updates = "0:1";       // Which updates should we output data?
}
EvalMancala eval {              // Evaluate organisms on their ability to play Mancala.
  target = "main_pop";          // Which population(s) should we evaluate?
  input_trait = "input";        // Into which trait should input values be placed?
  output_trait = "output";      // Out of which trait should output values be read?
  score_trait = "score";        // Which trait should we store success rating?
  opponent_type = "random";     // Which type of opponent should organisms face?
                                //  random: Always choose a random, legal move.
                                //  ai: Human supplied (but not very good) AI
                                //  random_org: Pick another random organism from collection.
}
SelectTournament select_t {     // Select the top fitness organisms from random subgroups for replication.
  select_pop = "main_pop";      // Which population should we select parents from?
  birth_pop = "next_pop";       // Which population should births go into?
  tournament_size = 7;          // Number of orgs in each tournament
  num_tournaments = pop_size;   // Number of tournaments to run
  fitness_trait = "score";      // Which trait provides the fitness value to use?
}
GrowthPlacement place_next {    // Always appened births to the end of a population.
  target = "main_pop,next_pop"; // Population(s) to manage.
}
MovePopulation sync_gen {       // Move organisms from one populaiton to another.
  from_pop = "next_pop";        // Population to move organisms from.
  to_pop = "main_pop";          // Population to move organisms into.
  reset_to = 1;                 // Should we erase organisms at the destination?
}
AvidaGPOrg avida_org {          // Organism consisting of Avida instructions.
  mut_prob = 0.01;              // Probability of each instruction mutating on reproduction.
  N = 50;                       // Initial number of instructions in genome
  init_random = 1;              // Should we randomize ancestor?  (0 = "blank" default)
  eval_time = 200;              // How many CPU cycles should we give organisms to run?
  input_name = "input";         // Where to find inputs
  output_name = "output";       // Where to write outputs
}

@start(0) print("random_seed = ", random_seed, "\n");
@start(0) inject("avida_org", "main_pop", pop_size);
@update(1000) exit();
